edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(wheat_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>% # comment in if you want arrows (they tend to crowd nodes due to number of edges)
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "wheat_network_2019-2021_k2_production.html")
# Sized by Reserve
nodes <- data.frame(id = row.names(wheat_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(wheat_list_networks_unweighted[[1]]),]$Country),
value = range01(c(wheat_res[wheat_res$iso3%in%row.names(wheat_list_networks_unweighted[[1]]),]$R0))*100,
group = c(wheat_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(wheat_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>%
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "wheat_network_2019-2021_k2_reserves.html")
label = c(country_list[country_list$iso3%in%row.names(rice_list_networks_unweighted[[1]]),]$Country),
### visNetwork interactive graphs
# Sized by Production
nodes <- data.frame(id = row.names(wheat_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(wheat_list_networks_unweighted[[1]]),]$Country),
value = range01(c(wheat_prod[wheat_prod$iso3%in%row.names(wheat_list_networks_unweighted[[1]]),]$P0))*20,
group = c(wheat_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(wheat_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>% # comment in if you want arrows (they tend to crowd nodes due to number of edges)
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "wheat_network_2019-2021_k2_production.html")
# Sized by Reserve
nodes <- data.frame(id = row.names(wheat_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(wheat_list_networks_unweighted[[1]]),]$Country),
value = range01(c(wheat_res[wheat_res$iso3%in%row.names(wheat_list_networks_unweighted[[1]]),]$R0))*100,
group = c(wheat_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(wheat_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>%
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "wheat_network_2019-2021_k2_reserves.html")
# Sized by Production
nodes <- data.frame(id = row.names(rice_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(rice_list_networks_unweighted[[1]]),]$Country),
value = range01(c(rice_prod[rice_prod$iso3%in%row.names(rice_list_networks_unweighted[[1]]),]$P0))*20,
group = c(rice_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(rice_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>% # comment in if you want arrows (they tend to crowd nodes due to number of edges)
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "rice_network_2019-2021_k2_production.html")
# Sized by Reserve
nodes <- data.frame(id = row.names(rice_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(rice_list_networks_unweighted[[1]]),]$Country),
value = range01(c(rice_res[rice_res$iso3%in%row.names(rice_list_networks_unweighted[[1]]),]$R0))*100,
group = c(rice_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(rice_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>%
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "rice_network_2019-2021_k2_reserves.html")
# Sized by Production
nodes <- data.frame(id = row.names(maize_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(maize_list_networks_unweighted[[1]]),]$Country),
value = range01(c(maize_prod[maize_prod$iso3%in%row.names(maize_list_networks_unweighted[[1]]),]$P0))*20,
group = c(maize_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(maize_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>% # comment in if you want arrows (they tend to crowd nodes due to number of edges)
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "maize_network_2019-2021_k2_production.html")
# Sized by Reserve
nodes <- data.frame(id = row.names(maize_list_networks_unweighted[[1]]),
label = c(country_list[country_list$iso3%in%row.names(maize_list_networks_unweighted[[1]]),]$Country),
value = range01(c(maize_res[maize_res$iso3%in%row.names(maize_list_networks_unweighted[[1]]),]$R0))*100,
group = c(maize_k[[1]]))
edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(maize_list_networks_unweighted[[1]])))
colnames(edges) <- c("from","to")
network <- visNetwork(nodes, edges) %>%
# visEdges(arrows = 'from') %>%
visOptions(selectedBy = "group", highlightNearest = TRUE) %>%
visPhysics(enabled = FALSE) %>%
visIgraphLayout(randomSeed = 123)
visSave(network, file = "maize_network_2019-2021_k2_reserves.html")
plot(c(1,2,3,4),c(1,2,3,4))
cropt <- "hi"
plot(c(1,2,3,4),c(1,2,3,4), title = "bye")
plot(c(1,2,3,4),c(1,2,3,4), main = "bye")
plot(c(1,2,3,4),c(1,2,3,4), main = "bye"+cropt)
trace(CC.eca.ts)
library(CoinCalc)
trace(CC.eca.ts)
trace(CC.eca.ts, edit=TRUE)
trace(CC.eca.ts, edit=TRUE)
trace(CC.ceca.ts, edit=TRUE)
View(timeDistOther)
View(timeDistSelf)
View(timeDistTot)
rm(list=ls(all=TRUE))
library("texreg", warn.conflicts = FALSE)
#install_github("leifeld/xergm")
library("xergm", warn.conflicts = FALSE)
library("btergm", warn.conflicts = FALSE)
library("tsna", warn.conflicts = FALSE)
library("ndtv", warn.conflicts = FALSE)
library("statnet", warn.conflicts = FALSE)
library("htmlwidgets", warn.conflicts = FALSE)
library("latticeExtra", warn.conflicts = FALSE)
library("tidyverse", warn.conflicts = FALSE)
library("igraph", warn.conflicts = FALSE)
library("fs", warn.conflicts = FALSE)
library("tictoc", warn.conflicts = FALSE)
library("RSiena", warn.conflicts = FALSE)
library("stargazer", warn.conflicts = FALSE)
# Laptop directory
dir.idp <- "C:/Users/17654/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/SomTempNetScale/Code/idpp"
dir.var <- "C:/Users/17654/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/SomTempNetScale/Code/varr"
dir.out <- "C:/Users/17654/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/SomTempNetScale/Code"
# load district idp data
fls <- dir_ls(dir.idp)
fls <- fls |> str_subset("idp_dist")
out_dist <- map(fls, read_csv, skip = 1, col_names = 1:74,show_col_types = FALSE)
class(out_dist) # list
length(out_dist) # 36
out_dist <- map(out_dist, function(x) as.matrix(x))
for (k in 1:36){diag(out_dist[[k]]) <- 0}
out_dist2 <- out_dist[13:36]
# load region idp data
fls <- dir_ls(dir.idp)
fls <- fls |> str_subset("idp_reg")
out_reg <- map(fls, read_csv, skip = 1, col_names = 1:18,show_col_types = FALSE)
class(out_reg) # list
length(out_reg) # 36
out_reg <- map(out_reg, function(x) as.matrix(x))
for (k in 1:36){diag(out_reg[[k]]) <- 0}
out_reg2 <- out_reg[13:36]
# load state idp data
fls <- dir_ls(dir.idp)
fls <- fls |> str_subset("idp_state")
out_state <- map(fls, read_csv, skip = 1, col_names = 1:6,show_col_types = FALSE)
class(out_state) # list
length(out_state) # 36
out_state <- map(out_state, function(x) as.matrix(x))
for (k in 1:36){diag(out_state[[k]]) <- 0}
out_state2 <- out_state[13:36]
# load attribute at district level
fls <- dir_ls(dir.var)
fls <- fls |> str_subset("var_dist")
att_dist <- map(fls, read_csv,show_col_types = FALSE)
att_dist <- att_dist[13:36]
# load attribute at region level
fls <- dir_ls(dir.var)
fls <- fls |> str_subset("var_reg")
att_reg <- map(fls, read_csv,show_col_types = FALSE)
att_reg <- att_reg[13:36]
# load attribute at state level
fls <- dir_ls(dir.var)
fls <- fls |> str_subset("var_state")
att_state <- map(fls, read_csv,show_col_types = FALSE)
att_state <- att_state[13:36]
#Link attributes to nodes
nets_dist <- list()
nets_reg <- list()
nets_state <- list()
for (i in 1:24){
att_dist2 <- map2(.x = att_dist, .y = i, function(x,y) {x$month <- y; return(x)})
att_dist3 <-bind_rows(att_dist2)
dat_dist <- att_dist3 |> group_by(id) |>
summarize(
acled = acled,
alshabaab = alshabaab,
anticivil = anticivil,
acled_pp = acled_pp,
alshabaab_pp = alshabaab_pp,
anticivil_pp = anticivil_pp,
precip = precip,
spi = spi,
temp = temp,
temp_anom = temp_anom,
pop = pop
)
net_dist <- network(out_dist2[[i]],directed = TRUE,loops = FALSE,matrix.type="adjacency")
net_dist %v% "acled" <- dat_dist$acled
net_dist %v% "alshabaab" <- dat_dist$alshabaab
net_dist %v% "anticivil" <- dat_dist$anticivil
net_dist %v% "acled_pp" <- dat_dist$acled_pp
net_dist %v% "alshabaab_pp" <- dat_dist$alshabaab_pp
net_dist %v% "anticivil_pp" <- dat_dist$anticivil_pp
net_dist %v% "precip" <- dat_dist$precip
net_dist %v% "spi" <- dat_dist$spi
net_dist %v% "temp" <- dat_dist$temp
net_dist %v% "temp_anom" <- dat_dist$temp_anom
net_dist %v% "pop" <- dat_dist$pop
nets_dist[[i]] <- net_dist
att_reg2 <- map2(.x = att_reg, .y = i, function(x,y) {x$month <- y; return(x)})
att_reg3 <-bind_rows(att_reg2)
dat_reg <- att_reg3 |> group_by(id) |>
summarize(
acled = acled,
alshabaab = alshabaab,
anticivil = anticivil,
acled_pp = acled_pp,
alshabaab_pp = alshabaab_pp,
anticivil_pp = anticivil_pp,
precip = precip,
spi = spi,
temp = temp,
temp_anom = temp_anom,
pop = pop
)
net_reg <- network(out_reg2[[i]],directed = TRUE,loops = FALSE,matrix.type="adjacency")
net_reg %v% "acled" <- dat_reg$acled
net_reg %v% "alshabaab" <- dat_reg$alshabaab
net_reg %v% "anticivil" <- dat_reg$anticivil
net_reg %v% "acled_pp" <- dat_reg$acled_pp
net_reg %v% "alshabaab_pp" <- dat_reg$alshabaab_pp
net_reg %v% "anticivil_pp" <- dat_reg$anticivil_pp
net_reg %v% "precip" <- dat_reg$precip
net_reg %v% "spi" <- dat_reg$spi
net_reg %v% "temp" <- dat_reg$temp
net_reg %v% "temp_anom" <- dat_reg$temp_anom
net_reg %v% "pop" <- dat_reg$pop
nets_reg[[i]] <- net_reg
att_state2 <- map2(.x = att_state, .y = i, function(x,y) {x$month <- y; return(x)})
att_state3 <-bind_rows(att_state2)
dat_state <- att_state3 |> group_by(id) |>
summarize(
acled = acled,
alshabaab = alshabaab,
anticivil = anticivil,
acled_pp = acled_pp,
alshabaab_pp = alshabaab_pp,
anticivil_pp = anticivil_pp,
precip = precip,
spi = spi,
temp = temp,
temp_anom = temp_anom,
pop = pop
)
net_state <- network(out_state2[[i]],directed = TRUE,loops = FALSE,matrix.type="adjacency")
net_state %v% "acled" <- dat_state$acled
net_state %v% "alshabaab" <- dat_state$alshabaab
net_state %v% "anticivil" <- dat_state$anticivil
net_state %v% "acled_pp" <- dat_state$acled_pp
net_state %v% "alshabaab_pp" <- dat_state$alshabaab_pp
net_state %v% "anticivil_pp" <- dat_state$anticivil_pp
net_state %v% "precip" <- dat_state$precip
net_state %v% "spi" <- dat_state$spi
net_state %v% "temp" <- dat_state$temp
net_state %v% "temp_anom" <- dat_state$temp_anom
net_state %v% "pop" <- dat_state$pop
nets_state[[i]] <- net_state
}
library("texreg", warn.conflicts = FALSE)
#install_github("leifeld/xergm")
library("xergm", warn.conflicts = FALSE)
library("btergm", warn.conflicts = FALSE)
library("tsna", warn.conflicts = FALSE)
library("ndtv", warn.conflicts = FALSE)
library("statnet", warn.conflicts = FALSE)
library("htmlwidgets", warn.conflicts = FALSE)
library("latticeExtra", warn.conflicts = FALSE)
library("tidyverse", warn.conflicts = FALSE)
library("igraph", warn.conflicts = FALSE)
library("fs", warn.conflicts = FALSE)
library("tictoc", warn.conflicts = FALSE)
library("RSiena", warn.conflicts = FALSE)
library("stargazer", warn.conflicts = FALSE)
# Laptop directory
dir.idp <- "C:/Users/17654/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/SomTempNetScale/Code/idpp"
dir.var <- "C:/Users/17654/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/SomTempNetScale/Code/varr"
dir.out <- "C:/Users/17654/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/SomTempNetScale/Code"
# load district idp data
fls <- dir_ls(dir.idp)
fls <- fls |> str_subset("idp_dist")
out_dist <- map(fls, read_csv, skip = 1, col_names = 1:74,show_col_types = FALSE)
class(out_dist) # list
length(out_dist) # 36
out_dist <- map(out_dist, function(x) as.matrix(x))
for (k in 1:36){diag(out_dist[[k]]) <- 0}
out_dist2 <- out_dist[13:36]
# load region idp data
fls <- dir_ls(dir.idp)
fls <- fls |> str_subset("idp_reg")
out_reg <- map(fls, read_csv, skip = 1, col_names = 1:18,show_col_types = FALSE)
class(out_reg) # list
length(out_reg) # 36
out_reg <- map(out_reg, function(x) as.matrix(x))
for (k in 1:36){diag(out_reg[[k]]) <- 0}
out_reg2 <- out_reg[13:36]
# load state idp data
fls <- dir_ls(dir.idp)
fls <- fls |> str_subset("idp_state")
out_state <- map(fls, read_csv, skip = 1, col_names = 1:6,show_col_types = FALSE)
class(out_state) # list
length(out_state) # 36
out_state <- map(out_state, function(x) as.matrix(x))
for (k in 1:36){diag(out_state[[k]]) <- 0}
out_state2 <- out_state[13:36]
# load attribute at district level
fls <- dir_ls(dir.var)
fls <- fls |> str_subset("var_dist")
att_dist <- map(fls, read_csv,show_col_types = FALSE)
att_dist <- att_dist[13:36]
# load attribute at region level
fls <- dir_ls(dir.var)
fls <- fls |> str_subset("var_reg")
att_reg <- map(fls, read_csv,show_col_types = FALSE)
att_reg <- att_reg[13:36]
# load attribute at state level
fls <- dir_ls(dir.var)
fls <- fls |> str_subset("var_state")
att_state <- map(fls, read_csv,show_col_types = FALSE)
att_state <- att_state[13:36]
#Link attributes to nodes
nets_dist <- list()
nets_reg <- list()
nets_state <- list()
for (i in 1:24){
att_dist2 <- map2(.x = att_dist, .y = i, function(x,y) {x$month <- y; return(x)})
att_dist3 <-bind_rows(att_dist2)
dat_dist <- att_dist3 |> group_by(id) |>
summarize(
acled = acled,
alshabaab = alshabaab,
anticivil = anticivil,
acled_pp = acled_pp,
alshabaab_pp = alshabaab_pp,
anticivil_pp = anticivil_pp,
precip = precip,
spi = spi,
temp = temp,
temp_anom = temp_anom,
pop = pop
)
net_dist <- network(out_dist2[[i]],directed = TRUE,loops = FALSE,matrix.type="adjacency")
net_dist %v% "acled" <- dat_dist$acled
net_dist %v% "alshabaab" <- dat_dist$alshabaab
net_dist %v% "anticivil" <- dat_dist$anticivil
net_dist %v% "acled_pp" <- dat_dist$acled_pp
net_dist %v% "alshabaab_pp" <- dat_dist$alshabaab_pp
net_dist %v% "anticivil_pp" <- dat_dist$anticivil_pp
net_dist %v% "precip" <- dat_dist$precip
net_dist %v% "spi" <- dat_dist$spi
net_dist %v% "temp" <- dat_dist$temp
net_dist %v% "temp_anom" <- dat_dist$temp_anom
net_dist %v% "pop" <- dat_dist$pop
nets_dist[[i]] <- net_dist
att_reg2 <- map2(.x = att_reg, .y = i, function(x,y) {x$month <- y; return(x)})
att_reg3 <-bind_rows(att_reg2)
dat_reg <- att_reg3 |> group_by(id) |>
summarize(
acled = acled,
alshabaab = alshabaab,
anticivil = anticivil,
acled_pp = acled_pp,
alshabaab_pp = alshabaab_pp,
anticivil_pp = anticivil_pp,
precip = precip,
spi = spi,
temp = temp,
temp_anom = temp_anom,
pop = pop
)
net_reg <- network(out_reg2[[i]],directed = TRUE,loops = FALSE,matrix.type="adjacency")
net_reg %v% "acled" <- dat_reg$acled
net_reg %v% "alshabaab" <- dat_reg$alshabaab
net_reg %v% "anticivil" <- dat_reg$anticivil
net_reg %v% "acled_pp" <- dat_reg$acled_pp
net_reg %v% "alshabaab_pp" <- dat_reg$alshabaab_pp
net_reg %v% "anticivil_pp" <- dat_reg$anticivil_pp
net_reg %v% "precip" <- dat_reg$precip
net_reg %v% "spi" <- dat_reg$spi
net_reg %v% "temp" <- dat_reg$temp
net_reg %v% "temp_anom" <- dat_reg$temp_anom
net_reg %v% "pop" <- dat_reg$pop
nets_reg[[i]] <- net_reg
att_state2 <- map2(.x = att_state, .y = i, function(x,y) {x$month <- y; return(x)})
att_state3 <-bind_rows(att_state2)
dat_state <- att_state3 |> group_by(id) |>
summarize(
acled = acled,
alshabaab = alshabaab,
anticivil = anticivil,
acled_pp = acled_pp,
alshabaab_pp = alshabaab_pp,
anticivil_pp = anticivil_pp,
precip = precip,
spi = spi,
temp = temp,
temp_anom = temp_anom,
pop = pop
)
net_state <- network(out_state2[[i]],directed = TRUE,loops = FALSE,matrix.type="adjacency")
net_state %v% "acled" <- dat_state$acled
net_state %v% "alshabaab" <- dat_state$alshabaab
net_state %v% "anticivil" <- dat_state$anticivil
net_state %v% "acled_pp" <- dat_state$acled_pp
net_state %v% "alshabaab_pp" <- dat_state$alshabaab_pp
net_state %v% "anticivil_pp" <- dat_state$anticivil_pp
net_state %v% "precip" <- dat_state$precip
net_state %v% "spi" <- dat_state$spi
net_state %v% "temp" <- dat_state$temp
net_state %v% "temp_anom" <- dat_state$temp_anom
net_state %v% "pop" <- dat_state$pop
nets_state[[i]] <- net_state
}
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties
+dgwesp(0, fixed=FALSE, cutoff=0, type="OTP")
+dgwesp(0, fixed=FALSE, cutoff=0, type="ITP")
+dgwdsp(0, fixed=FALSE, cutoff=0, type="OTP")
+dgwdsp(0, fixed=FALSE, cutoff=0, type="ITP")
+dgwesp(1, fixed=FALSE, cutoff=0, type="OTP")
+dgwesp(1, fixed=FALSE, cutoff=0, type="ITP")
+dgwdsp(1, fixed=FALSE, cutoff=0, type="OTP")
+dgwdsp(1, fixed=FALSE, cutoff=0, type="ITP")
, R = 100, parallel = "snow", ncpus = 2)
summary(m1_dist,level = 0.95)
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties, R = 100, parallel = "snow", ncpus = 2)
summary(m1_dist,level = 0.95)
summary(m1_dist,level = 0.99)
summary(m1_dist,level = 0.999)
summary(m1_dist,level = 0.95)
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties
+ gwidegree(decay = 0, fixed = TRUE)
+ gwidegree(decay = 1, fixed = TRUE)
+ gwodegree(decay = 0, fixed = TRUE)
+ gwodegree(decay = 1, fixed = TRUE),
R = 100, parallel = "snow", ncpus = 2)
summary(m1_dist,level = 0.95)
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties
+ gwidegree(decay = 1, fixed = TRUE)
+ gwodegree(decay = 1, fixed = TRUE),
R = 100, parallel = "snow", ncpus = 2)
summary(m1_dist,level = 0.95)
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties
+ gwidegree(decay = 1, fixed = TRUE)
+ gwodegree(decay = 1, fixed = TRUE)
+ nodeocov(precip)+nodeicov(precip),
R = 100, parallel = "snow", ncpus = 2)
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties
+ gwidegree(decay = 1, fixed = TRUE)
+ gwodegree(decay = 1, fixed = TRUE)
+ nodeocov("precip")+nodeicov("precip"),
R = 100, parallel = "snow", ncpus = 2)
# btergm for district
m1_dist <- btergm(nets_dist ~ edges+mutual+transitiveties+cyclicalties
+ gwidegree(decay = 1, fixed = TRUE)
+ gwodegree(decay = 1, fixed = TRUE)
+ diff("pop")
+ nodeocov("precip") + nodeicov("precip")
+ nodeocov("spi") + nodeicov("spi")
+ nodeocov("temp") + nodeicov("temp")
+ nodeocov("temp_anom") + nodeicov("temp_anom"),
R = 100, parallel = "snow", ncpus = 2)
summary(m1_dist,level = 0.95)
rm(list=ls(all=TRUE))
### LOAD PACKAGES ###
library(CoinCalc)
library(rlang)
library(ggExtra)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(patchwork)
library(grid)
library(gridExtra)
library(ggrepel)
library(raster)
library(RColorBrewer)
library(latticeExtra)
library(dplyr)
library(TSA)
library(rgdal)
library(sf)
library(rgeos)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidygraph)
library(ggraph)
library(poweRlaw)
### DIRECTORY SETTING ###
pc.name <- Sys.info()["user"]
dir.data <- paste("C:/Users/",pc.name,"/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/temporal dynamics/for pub/data",sep = "")
dir.out <- paste("C:/Users/",pc.name,"/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/temporal dynamics/for pub/out",sep = "")
dir.udf <- paste("C:/Users/",pc.name,"/Dropbox (UFL)/Woi Sok Tony Oh/HMEIPostdoc/research/temporal dynamics/for pub/udf",sep = "")
### DATA CLEANING ###
# Load user-defined functions
setwd(dir.udf)
