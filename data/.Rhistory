i=1
conf_dat[,i]
seriesA <- conf_dat[,i]
seriesB <- rain_dat[,i]
bindata = matrix(NA, 2, length(seriesA))
bindata
bindata[1, ] = seriesA
bindata[2, ] = seriesB
bindata
rownames(bindata) = c("seriesA", "seriesB")
Tlen = length(bindata[1, !is.na(bindata[1, ])])
Tlen
steplen = length(seriesA)
steplen
N_A = as.numeric(Tlen - table(bindata[1, ] == 1)[1])
N_B = as.numeric(Tlen - table(bindata[2, ] == 1)[1])
N_A
N_B
K_prec = 0
start = step - 1 - 4
start = 1 - 1 - 4
bindata[2, start:end]
end = step - tau
end = step - 1
end = 1 - 1
step = 10
start = step - 1 - 4
start
end = step - 1
end
bindata[1,start:end]
is.element(bindata[1,start:end])
is.element(1,bindata[1,start:end])
is.element(bindata[1,10:50])
bindata[1,10:50]
sum(bindata[2,1:4])
bindata[2,1:4])
bindata[2,1:4]
CC.ts2es(seriesA)
### LOAD PACKAGES ###
library(CoinCalc)
CC.ts2es(seriesA)
seriesA = CC.ts2es(seriesA)
seriesB = CC.ts2es(seriesB)
seriesA
seriesB
span = (max(seriesA$span[1], seriesB$span[1]):min(seriesA$span[2],
seriesB$span[2]))
span
Tlen = length(span)
Tlen
seriesA_sort = sort(seriesA$es)
seriesA
seriesA_sort
wtA = rep(0, N_A)
wtA[1] = seriesA_sort[1] - seriesA$span[1]
for (i in 2:N_A) {
wtA[i] = seriesA_sort[i] - seriesA_sort[i - 1]
}
wtA
seriesA
seriesB_sort = sort(seriesB$es)
wtB = rep(0, N_B)
wtB[1] = seriesB_sort[1] - seriesB$span[1]
for (i in 2:N_B) {
wtB[i] = seriesB_sort[i] - seriesB_sort[i - 1]
}
surdist = matrix(NA, 2, reps)
surdist = matrix(NA, 2, 100)
surA = sample(wtA, size = 1)
wtA
surA
surA = sample(wtA, size = 1)
surA
surA = sample(wtA, size = 1)
surA
surA = sample(wtA, size = 1)
surA
for (i in 2:length(seriesA$es)) {
tmp = surA[i - 1] + sample(wtA, size = 1)
if (tmp > span[Tlen]) {
break
}
else {
surA[i] = tmp
}
}
tmp
surA
seriesA
surB = sample(wtB, size = 1)
for (i in 2:length(seriesB$es)) {
tmp = surB[i - 1] + sample(wtB, size = 1)
if (tmp > span[Tlen]) {
break
}
else {
surB[i] = tmp
}
}
K_prec_sur = 0
surA
seriesA
seriesB
surB
surA
surA[1]
surA[1]-tau
surA[1]-1 - surB[1]
is.element((surA[1]-1 - surB[1]),c(0:4))
i=1,j=1,is.element((surA[i]-1 - surB[j]),c(0:4))
i=1;j=1;is.element((surA[i]-1 - surB[j]),c(0:4))
i=10;j=20;is.element((surA[i]-1 - surB[j]),c(0:4))
c(0:4)
(surA[i]-1 - surB[j])
surA[i]
surB[]
surB[j]
surA
surB
surA
diff(surA)
wtA
seriesA <- conf_dat[,i]
seriesB <- rain_dat[,i]
surA
class(surA)
numeric(365)
seriesA
i=1
seriesA <- conf_dat[,i]
seriesB <- rain_dat[,i]
1+numeric(10)
hi = numeric(365)
hi
hi[surA] = 1
surA
hi
Tlen
seriesA_sur = numeric(Tlen)
seriesB_sur = numeric(Tlen)
seriesA_sur[surA] = 1
seriesB_sur[surB] = 1
seriesA_sur
bindata_sur = matrix(NA, 2, length(seriesA_sur))
bindata_sur
?ergmconstraints
?ergmConstraints
?ergmConstraint
library(RTransferEntropy)
library(igraph)
library(future)
library(ggplot2)
library(broom)
library(sf)
library(ineq)
library(plyr)
library(patchwork)
library(tidyverse)
library(fs)
library(network)
library(ergm)
library(ergm.count)
library(ergmito)
library(gridExtra)
library(parallel)
library(doParallel)
library(infotheo)
library(geosphere)
library(GGally)
?ergmConstraint
# 0.29, 0.43, 0.84 scenarios
# RCP2.6 median
slope <- lm(waterlevel ~ year, data = wlevel)$coefficients[2]
wlevel_1 <- wlevel + (0.43/99-slope) * c(0:99)
p1 <- ggplot(data = wlevel_1, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p1
source("C:/Users/twokr/Bangladesh_abm/gen_random_waterlevel.R", echo=TRUE)
fileConn1<-file("C:/Users/twokr/Bangladesh_abm/annualpeak1.txt")
writeLines(wlevel_1, fileConn1)
close(fileConn1)
writecsv(wlevel_1,"C:/Users/twokr/Bangladesh_abm/annualpeak1.txt", row.names = FALSE)
write.csv(wlevel_1,"C:/Users/twokr/Bangladesh_abm/annualpeak1.txt", row.names = FALSE)
write.csv(wlevel_2,"C:/Users/twokr/Bangladesh_abm/annualpeak2.txt", row.names = FALSE)
write.csv(wlevel_3,"C:/Users/twokr/Bangladesh_abm/annualpeak3.txt", row.names = FALSE)
View(wlevel_1)
waterlevel
wlevel
# 0.29, 0.43, 0.84 scenarios
# RCP2.6 median
slope <- lm(waterlevel ~ year, data = wlevel)$coefficients[2]
wlevel_1$waterlevel <- wlevel$waterlevel + (0.43/99-slope) * c(0:99)
p1 <- ggplot(data = wlevel_1, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p1
# RCP4.5 median
wlevel_2$waterlevel <- wlevel$waterlevel + (0.55/99-slope) * c(0:99)
p2 <- ggplot(data = wlevel_2, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p2
# RCP8.5 median
wlevel_3$waterlevel <- wlevel$waterlevel + (0.84/99-slope) * c(0:99)
p3 <- ggplot(data = wlevel_3, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p3
write.csv(wlevel_1,"C:/Users/twokr/Bangladesh_abm/annualpeak1.txt", row.names = FALSE)
write.csv(wlevel_2,"C:/Users/twokr/Bangladesh_abm/annualpeak2.txt", row.names = FALSE)
write.csv(wlevel_3,"C:/Users/twokr/Bangladesh_abm/annualpeak3.txt", row.names = FALSE)
View(wlevel_1)
require(fitdistrplus)
require(tidyverse)
require(dplyr)
require(ggplot2)
wlevel <- read.csv("C:/Users/twokr/Desktop/annualpeak.csv")
plot(wlevel$waterlevel, type = "l" )
head(wlevel)
fit_norm <- fitdist(wlevel$waterlevel, "norm")  # Normal distribution
summary(fit_norm)
plot(fit_norm)
# Test with Gamma
start <- list(shape = 0.06, rate = 10.2)
fit_gam<- fitdist(wlevel$waterlevel, "gamma",start = start,method = "mse" ) # Gamma distribution
summary(fit_gam)
plot(fit_gam) #results not good
# so we use a normal distribution
mu <- fit_norm$estimate["mean"]
sigma <- fit_norm$estimate["sd"]
# Generate 100 random numbers from the fitted normal distribution
#If you want the new set of random numbers, keep running this part
rand_nums <- rnorm(100, mean = mu, sd = sigma)
gen_wlevel <- data.frame(year = c(1:100), waterlevel = rand_nums)
plot(rand_nums, type = 'l')
##############################
###Create plots, with linear trend analysis
wlevel <- wlevel %>%
mutate(year = c(1:dim(wlevel)[1]))
#plot for observed values
p <- ggplot(data = wlevel, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p
# plot for random values
# p <- ggplot(data = gen_wlevel, aes( x = year, y = waterlevel)) +
#     geom_line() +
#     geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
#     labs(x = "Year", y = "Water Level") +
#     theme_classic()
# p
# 0.29, 0.43, 0.84 scenarios
# RCP2.6 median
slope <- lm(waterlevel ~ year, data = wlevel)$coefficients[2]
wlevel_1$waterlevel <- wlevel$waterlevel + (0.43/99-slope) * c(0:99)
require(fitdistrplus)
require(tidyverse)
require(dplyr)
require(ggplot2)
wlevel <- read.csv("C:/Users/twokr/Desktop/annualpeak.csv")
plot(wlevel$waterlevel, type = "l" )
head(wlevel)
fit_norm <- fitdist(wlevel$waterlevel, "norm")  # Normal distribution
summary(fit_norm)
plot(fit_norm)
# Test with Gamma
start <- list(shape = 0.06, rate = 10.2)
fit_gam<- fitdist(wlevel$waterlevel, "gamma",start = start,method = "mse" ) # Gamma distribution
summary(fit_gam)
plot(fit_gam) #results not good
# so we use a normal distribution
mu <- fit_norm$estimate["mean"]
sigma <- fit_norm$estimate["sd"]
# Generate 100 random numbers from the fitted normal distribution
#If you want the new set of random numbers, keep running this part
rand_nums <- rnorm(100, mean = mu, sd = sigma)
gen_wlevel <- data.frame(year = c(1:100), waterlevel = rand_nums)
plot(rand_nums, type = 'l')
##############################
###Create plots, with linear trend analysis
wlevel <- wlevel %>%
mutate(year = c(1:dim(wlevel)[1]))
#plot for observed values
p <- ggplot(data = wlevel, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p
# plot for random values
# p <- ggplot(data = gen_wlevel, aes( x = year, y = waterlevel)) +
#     geom_line() +
#     geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
#     labs(x = "Year", y = "Water Level") +
#     theme_classic()
# p
# 0.29, 0.43, 0.84 scenarios
# RCP2.6 median
slope <- lm(waterlevel ~ year, data = wlevel)$coefficients[2]
wlevel_1 <- wlevel
wlevel_1$waterlevel <- wlevel$waterlevel + (0.43/99-slope) * c(0:99)
p1 <- ggplot(data = wlevel_1, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p1
# RCP4.5 median
wlevel_2 <- wlevel
wlevel_2$waterlevel <- wlevel$waterlevel + (0.55/99-slope) * c(0:99)
p2 <- ggplot(data = wlevel_2, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p2
# RCP8.5 median
wlevel_3 <- wlevel
wlevel_3$waterlevel <- wlevel$waterlevel + (0.84/99-slope) * c(0:99)
p3 <- ggplot(data = wlevel_3, aes( x = year, y = waterlevel)) +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Add trend line using linear regression
labs(x = "Year", y = "Water Level") +
theme_classic()
p3
write.csv(wlevel_1,"C:/Users/twokr/Bangladesh_abm/annualpeak1.txt", row.names = FALSE)
write.csv(wlevel_2,"C:/Users/twokr/Bangladesh_abm/annualpeak2.txt", row.names = FALSE)
write.csv(wlevel_3,"C:/Users/twokr/Bangladesh_abm/annualpeak3.txt", row.names = FALSE)
View(wlevel)
View(wlevel_1)
uninstall::uninstall.packages("sf", lib, warning = TRUE, ...)
installr::uninstall.packages("sf", lib, warning = TRUE, ...)
utils::remove.packages("sf")
shp <- shapefile("Som_Admbnda_Adm2_UNDP_sort2.shp");
rm(list=ls(all=TRUE))
### LOAD PACKAGES ###
library(CoinCalc)
library(rlang)
library(ggExtra)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(patchwork)
library(grid)
library(gridExtra)
library(ggrepel)
library(raster)
library(RColorBrewer)
library(latticeExtra)
library(dplyr)
library(TSA)
library(rgdal)
library(sf)
library(rgeos)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidygraph)
library(ggraph)
library(poweRlaw)
library(pals)
library(biscale)
library(reshape2)
library(future)
library(fields)
#plan(multisession)
######
### DIRECTORY SETTING ###
pc.name <- Sys.info()["user"]
dir.data <- paste("C:/Users/",pc.name,"/MigTemDyn/data",sep = "")
dir.udf <- paste("C:/Users/",pc.name,"/MigTemDyn/udf",sep = "")
dir.out <- paste("C:/Users/",pc.name,"/MigTemDyn/out",sep = "")
dir.rdat <- paste("C:/Users/",pc.name,"/MigTemDyn/Rdat",sep = "")
######
### DATA CLEANING ###
# Load user-defined functions
setwd(dir.udf)
dump("eca_udf", file="eca_udf");source("eca_udf.R")
dump("bursty_GB_udf", file="bursty_GB_udf");source("bursty_GB_udf.R")
dump("bursty_KJ_udf", file="bursty_KJ_udf");source("bursty_KJ_udf.R")
dump("BM_cal_udf", file="BM_cal_udf");source("BM_cal_udf.R")
###
# Load Data
setwd(dir.data)
distName <- read.csv("dist_name.csv",skip = 0,header = FALSE)
outidp_dat <- read.csv("Som16to20.csv")
conf_dat <- read.csv("alsha_dat.csv",skip = 0, header = FALSE)
rain_dat <- read.csv("no_rain.csv",skip = 0, header = FALSE)
tmax_dat <- read.csv("tmax2.csv",skip = 0, header = FALSE)
panom_dat <- read.csv("rain_anom3.csv",skip = 0, header = FALSE)
tanommax_dat <- read.csv("temp_max_anom3.csv",skip = 0, header = FALSE)
shp <- shapefile("Som_Admbnda_Adm2_UNDP_sort2.shp");
colnames(conf_dat) <- distName[[1]]
colnames(rain_dat) <- distName[[1]]
colnames(panom_dat) <- distName[[1]]
colnames(tanommax_dat) <- distName[[1]]
###
# Create migration event time series
timeDistOther <- ts_crt(outidp_dat,0,"mig")
###
# B-M calculation
View(shp)
pop <- read.csv("pop.csv",skip = 0, header = FALSE)
#Plot Pop
shp$pop <- log(pop)
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(-0.001,1.001,length=100),
lwd = 1)
View(shp)
#Plot Pop
shp$pop <- log(pop$V1)
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(-0.001,1.001,length=100),
lwd = 1)
plot1
log(pop$V1)
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop$V1)),max(log(pop$V1)),length=100),
lwd = 1)
plot1
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop$V1))-0.01,max(log(pop$V1))+0.01,length=100),
lwd = 1)
plot1
View(shp)
View(outidp_dat)
View(outidp_dat)
outidp_dat[outidp_dat$fromDist == 1,6]
outidp_dat[outidp_dat$fromDist == 4,6]
#Plot Pop
pop <-c()
for (i in 1:74){
int <- sum(outidp_dat[outidp_dat$fromDist == i,6])
pop <- c(pop,int)
}
shp$pop <- log(pop)
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop$V1))-0.01,max(log(pop$V1))+0.01,length=100),
lwd = 1)
plot1
shp$pop
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1)
plot1
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1,bty = "n")
plot1
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1,par.settings = list(axis.line = list(col = 'transparent')))
plot1
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1#,par.settings = list(axis.line = list(col = 'transparent'))
)
axis.line <- trellis.par.get("axis.line")
axis.text <- trellis.par.get("axis.text")
plot1
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1#,par.settings = list(axis.line = list(col = 'transparent'))
box = FALSE)
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1#,par.settings = list(axis.line = list(col = 'transparent'))
,box = FALSE)
plot1
trellis.par.set(axis.line=list(col=NA))
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1#,par.settings = list(axis.line = list(col = 'transparent'))
,box = FALSE)
plot1
#Plot Pop
pop <-c()
for (i in 1:74){
int <- sum(outidp_dat[outidp_dat$fromDist == i & outidp_dat$fromDist != outidp_dat$toDist,6])
pop <- c(pop,int)
}
shp$pop <- log(pop)
trellis.par.set(axis.line=list(col=NA))
plot1 <- spplot(shp, "pop",
col.regions = rev(heat.colors(101)),
at = seq(min(log(pop))-0.01,max(log(pop))+0.01,length=100),
lwd = 1#,par.settings = list(axis.line = list(col = 'transparent'))
)
plot1
